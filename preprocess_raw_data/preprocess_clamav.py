import subprocess
import os
from inspect import signature
import re

import pandas as pd


def install_homebrew_package(package_name):
    try:
        subprocess.run(['brew', 'install', package_name], check=True)
        print(f"{package_name} installed successfully.")
    except subprocess.CalledProcessError:
        print(f"Failed to install {package_name}. It might already be installed.")


def unpack_signature_file(input_file, output_dir):
    try:
        subprocess.run(['sigtool', '--unpack', input_file], cwd=output_dir, check=True)
        print(f"Unpacked {input_file} successfully in {output_dir}.")
    except subprocess.CalledProcessError:
        print(f"Failed to unpack {input_file}.")


def convert_signature_files_to_df(unpacked_dir):
    """
    Converts ClamAV signature files (.hdb, .ndb, etc.) in the unpacked directory to a DataFrame.
    Args:
        unpacked_dir (str): Directory containing the unpacked signature files.

    Returns:
        pd.DataFrame: DataFrame containing malware information.
    """
    all_data = []

    for filename in os.listdir(unpacked_dir):
        file_path = os.path.join(unpacked_dir, filename)

        if filename.endswith(('.hdb', '.ndb', '.mdb')):
            print(f"Processing {filename}...")

            with open(file_path, 'r') as f:
                for line in f:
                    parts = line.strip().split(':')
                    if len(parts) >= 3:
                        if filename.endswith('.ndb'):
                            malware_name = parts[0]
                        else:
                            malware_name = parts[2]
                        all_data.append([malware_name])

    df = pd.DataFrame(all_data, columns=['malware_name'])

    return df


def check_homebrew_installed():
    try:
        subprocess.run(['brew', '--version'], check=True)
        print("Homebrew is installed.")
    except subprocess.CalledProcessError:
        print("Homebrew is not installed. Please install Homebrew first.")


def preprocess_clamav_data(data_df):
    data_df = data_df[data_df['malware_name'].str.contains('.CVE_|.cve_', case=False)]
    data_df = data_df.reset_index(drop=True)

    # change 'cve' to uppercase
    data_df['malware_name'] = data_df['malware_name'].apply(lambda x: x.upper() if 'cve' in x else x)
    # remove potential index from malware names
    data_df['malware_name'] = data_df['malware_name'].apply(lambda x: x.split('-')[0])
    # keep only the CVE part of the malware names
    data_df['malware_name'] = data_df['malware_name'].apply(lambda x: x.split('.')[-1])

    cve_id_format = r'CVE_\d{4}_\d{4,7}'
    cve_ids = data_df['malware_name'].apply(lambda x: 1 if re.match(cve_id_format, x) else 0)
    for i in range(len(data_df)):
        if cve_ids.iloc[i] == 0:
            if re.search(cve_id_format, data_df['malware_name'].iloc[i]):
                data_df.loc[i, 'malware_name'] = re.search(cve_id_format, data_df['malware_name'].iloc[i]).group()
                cve_ids.iloc[i] = 1
    data_df = data_df[cve_ids == 1]
    data_df = data_df.drop_duplicates(subset='malware_name')
    # change _ to - in cve names
    data_df['malware_name'] = data_df['malware_name'].apply(lambda x: x.replace('_', '-'))

    data_df = data_df.rename(columns={'malware_name': 'cve_id'})


    return data_df


def main():
    check_homebrew_installed()

    install_homebrew_package('clamav')

    signature_files = ['main', 'daily']
    data_df = pd.DataFrame()
    for signature_file_name in signature_files:
        signature_file = f'/Users/lyamin/Downloads/clamav/{signature_file_name}.cvd'
        unpacked_directory = f'/Users/lyamin/Downloads/clamav/{signature_file_name}'
        os.makedirs(unpacked_directory, exist_ok=True)
        unpack_signature_file(signature_file, unpacked_directory)

        df = convert_signature_files_to_df(unpacked_directory)
        data_df = pd.concat([data_df, df])
        subprocess.run(['rm', '-rf', unpacked_directory])

    data_df = preprocess_clamav_data(data_df)
    data_df.to_csv('../processed_data/malware_inclusion.csv', index=False)


if __name__ == "__main__":
    main()
